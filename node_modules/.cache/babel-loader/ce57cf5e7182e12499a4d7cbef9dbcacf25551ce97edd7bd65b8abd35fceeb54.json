{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _slicedToArray = require('@babel/runtime/helpers/slicedToArray');\nvar React = require('react');\nvar _defineProperty = require('@babel/runtime/helpers/defineProperty');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nvar _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);\nvar LinguiContext = /*#__PURE__*/React__default['default'].createContext(null);\nfunction useLingui() {\n  var context = React__default['default'].useContext(LinguiContext);\n  {\n    if (context == null) {\n      throw new Error(\"useLingui hook was used without I18nProvider.\");\n    }\n  }\n  return context;\n}\nfunction withI18n(o) {\n  return function (WrappedComponent) {\n    return function (props) {\n      {\n        if (typeof o === \"function\" || /*#__PURE__*/React__default['default'].isValidElement(o)) {\n          throw new Error(\"withI18n([options]) takes options as a first argument, \" + \"but received React component itself. Without options, the Component \" + \"should be wrapped as withI18n()(Component), not withI18n(Component).\");\n        }\n      }\n      var _useLingui = useLingui(),\n        i18n = _useLingui.i18n;\n      return /*#__PURE__*/React__default['default'].createElement(WrappedComponent, Object.assign({}, props, {\n        i18n: i18n\n      }));\n    };\n  };\n}\nvar I18nProvider = function I18nProvider(_ref) {\n  var i18n = _ref.i18n,\n    defaultComponent = _ref.defaultComponent,\n    _ref$forceRenderOnLoc = _ref.forceRenderOnLocaleChange,\n    forceRenderOnLocaleChange = _ref$forceRenderOnLoc === void 0 ? true : _ref$forceRenderOnLoc,\n    children = _ref.children;\n\n  /**\r\n   * We can't pass `i18n` object directly through context, because even when locale\r\n   * or messages are changed, i18n object is still the same. Context provider compares\r\n   * reference identity and suggested workaround is create a wrapper object every time\r\n   * we need to trigger re-render. See https://reactjs.org/docs/context.html#caveats.\r\n   *\r\n   * Due to this effect we also pass `defaultComponent` in the same context, instead\r\n   * of creating a separate Provider/Consumer pair.\r\n   *\r\n   * We can't use useMemo hook either, because we want to recalculate value manually.\r\n   */\n  var makeContext = function makeContext() {\n    return {\n      i18n: i18n,\n      defaultComponent: defaultComponent\n    };\n  };\n  var _React$useState = React__default['default'].useState(makeContext()),\n    _React$useState2 = _slicedToArray__default['default'](_React$useState, 2),\n    context = _React$useState2[0],\n    setContext = _React$useState2[1];\n  /**\r\n   * Subscribe for locale/message changes\r\n   *\r\n   * I18n object from `@lingui/core` is the single source of truth for all i18n related\r\n   * data (active locale, catalogs). When new messages are loaded or locale is changed\r\n   * we need to trigger re-rendering of LinguiContext.Consumers.\r\n   */\n\n  React__default['default'].useEffect(function () {\n    var unsubscribe = i18n.on(\"change\", function () {\n      return setContext(makeContext());\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n  var renderKey = forceRenderOnLocaleChange && i18n.locale;\n  if (forceRenderOnLocaleChange && !renderKey) return null;\n  return /*#__PURE__*/React__default['default'].createElement(LinguiContext.Provider, {\n    value: context,\n    key: renderKey\n  }, children);\n};\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nvar tagRe = /<(\\d+)>(.*?)<\\/\\1>|<(\\d+)\\/>/;\nvar nlRe = /(?:\\r\\n|\\r|\\n)/g; // For HTML, certain tags should omit their close tag. We keep a whitelist for\n// those special-case tags.\n\nvar voidElementTags = {\n  area: true,\n  base: true,\n  br: true,\n  col: true,\n  embed: true,\n  hr: true,\n  img: true,\n  input: true,\n  keygen: true,\n  link: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true,\n  menuitem: true\n};\n/**\r\n * `formatElements` - parse string and return tree of react elements\r\n *\r\n * `value` is string to be formatted with <0>Paired<0/> or <0/> (unpaired)\r\n * placeholders. `elements` is a array of react elements which indexes\r\n * correspond to element indexes in formatted string\r\n */\n\nfunction formatElements(value) {\n  var elements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var uniqueId = makeCounter(0, '$lingui$');\n  var parts = value.replace(nlRe, \"\").split(tagRe); // no inline elements, return\n\n  if (parts.length === 1) return value;\n  var tree = [];\n  var before = parts.shift();\n  if (before) tree.push(before);\n  var _iterator = _createForOfIteratorHelper(getElements(parts)),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray__default['default'](_step.value, 3),\n        index = _step$value[0],\n        children = _step$value[1],\n        after = _step$value[2];\n      var element = elements[index];\n      if (!element || voidElementTags[element.type] && children) {\n        if (!element) {\n          console.error(\"Can use element at index '\".concat(index, \"' as it is not declared in the original translation\"));\n        } else {\n          console.error(\"\".concat(element.type, \" is a void element tag therefore it must have no children\"));\n        } // ignore problematic element but push its children and elements after it\n\n        element = /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment);\n      }\n      tree.push( /*#__PURE__*/React__default['default'].cloneElement(element, {\n        key: uniqueId()\n      },\n      // format children for pair tags\n      // unpaired tags might have children if it's a component passed as a variable\n      children ? formatElements(children, elements) : element.props.children));\n      if (after) tree.push(after);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return tree;\n}\n/*\r\n * `getElements` - return array of element indexes and element childrens\r\n *\r\n * `parts` is array of [pairedIndex, children, unpairedIndex, textAfter, ...]\r\n * where:\r\n * - `pairedIndex` is index of paired element (undef for unpaired)\r\n * - `children` are children of paired element (undef for unpaired)\r\n * - `unpairedIndex` is index of unpaired element (undef for paired)\r\n * - `textAfter` is string after all elements (empty string, if there's nothing)\r\n *\r\n * `parts` length is always multiply of 4\r\n *\r\n * Returns: Array<[elementIndex, children, after]>\r\n */\n\nfunction getElements(parts) {\n  if (!parts.length) return [];\n  var _parts$slice = parts.slice(0, 4),\n    _parts$slice2 = _slicedToArray__default['default'](_parts$slice, 4),\n    paired = _parts$slice2[0],\n    children = _parts$slice2[1],\n    unpaired = _parts$slice2[2],\n    after = _parts$slice2[3];\n  return [[parseInt(paired || unpaired), children || \"\", after]].concat(getElements(parts.slice(4, parts.length)));\n}\nvar makeCounter = function makeCounter() {\n  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return function () {\n    return \"\".concat(prefix, \"_\").concat(count++);\n  };\n};\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty__default['default'](target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction Trans(props) {\n  var _useLingui = useLingui(),\n    i18n = _useLingui.i18n,\n    defaultComponent = _useLingui.defaultComponent;\n  var render = props.render,\n    component = props.component,\n    id = props.id,\n    message = props.message,\n    formats = props.formats;\n  var values = _objectSpread({}, props.values);\n  var components = _objectSpread({}, props.components);\n  if (values) {\n    /*\r\n      Related discussion: https://github.com/lingui/js-lingui/issues/183\r\n           Values *might* contain React elements with static content.\r\n      They're replaced with <INDEX /> placeholders and added to `components`.\r\n           Example:\r\n      Translation: Hello {name}\r\n      Values: { name: <strong>Jane</strong> }\r\n           It'll become \"Hello <0 />\" with components=[<strong>Jane</strong>]\r\n      */\n    Object.keys(values).forEach(function (key) {\n      var value = values[key];\n      if (! /*#__PURE__*/React__default['default'].isValidElement(value)) return;\n      var index = Object.keys(components).length;\n      components[index] = value;\n      values[key] = \"<\".concat(index, \"/>\");\n    });\n  }\n  var _translation = i18n && typeof i18n._ === \"function\" ? i18n._(id, values, {\n    message: message,\n    formats: formats\n  }) : id; // i18n provider isn't loaded at all\n\n  var translation = _translation ? formatElements(_translation, components) : null;\n  if (render === null || component === null) {\n    // Although `string` is a valid react element, types only allow `Element`\n    // Upstream issue: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544\n    return translation;\n  }\n  var FallbackComponent = defaultComponent || React__default['default'].Fragment; // Validation of `render` and `component` props\n\n  if (render && component) {\n    console.error(\"You can't use both `component` and `render` prop at the same time. `component` is ignored.\");\n  } else if (render && typeof render !== \"function\") {\n    console.error(\"Invalid value supplied to prop `render`. It must be a function, provided \".concat(render));\n  } else if (component && typeof component !== \"function\") {\n    // Apparently, both function components and class components are functions\n    // See https://stackoverflow.com/a/41658173/1535540\n    console.error(\"Invalid value supplied to prop `component`. It must be a React component, provided \".concat(component));\n    return /*#__PURE__*/React__default['default'].createElement(FallbackComponent, null, translation);\n  } // Rendering using a render prop\n\n  if (typeof render === \"function\") {\n    // Component: render={(props) => <a title={props.translation}>x</a>}\n    return render({\n      id: id,\n      translation: translation,\n      message: message\n    });\n  } // `component` prop has a higher precedence over `defaultComponent`\n\n  var Component = component || FallbackComponent;\n  return /*#__PURE__*/React__default['default'].createElement(Component, null, translation);\n}\nTrans.defaultProps = {\n  values: {},\n  components: {}\n};\nexports.I18nProvider = I18nProvider;\nexports.Trans = Trans;\nexports.useLingui = useLingui;\nexports.withI18n = withI18n;","map":{"version":3,"names":[],"sources":[],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar _slicedToArray = require('@babel/runtime/helpers/slicedToArray');\nvar React = require('react');\nvar _defineProperty = require('@babel/runtime/helpers/defineProperty');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\nvar _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);\n\nvar LinguiContext = /*#__PURE__*/React__default['default'].createContext(null);\nfunction useLingui() {\n  var context = React__default['default'].useContext(LinguiContext);\n\n  {\n    if (context == null) {\n      throw new Error(\"useLingui hook was used without I18nProvider.\");\n    }\n  }\n\n  return context;\n}\nfunction withI18n(o) {\n  return function (WrappedComponent) {\n    return function (props) {\n      {\n        if (typeof o === \"function\" || /*#__PURE__*/React__default['default'].isValidElement(o)) {\n          throw new Error(\"withI18n([options]) takes options as a first argument, \" + \"but received React component itself. Without options, the Component \" + \"should be wrapped as withI18n()(Component), not withI18n(Component).\");\n        }\n      }\n\n      var _useLingui = useLingui(),\n          i18n = _useLingui.i18n;\n\n      return /*#__PURE__*/React__default['default'].createElement(WrappedComponent, Object.assign({}, props, {\n        i18n: i18n\n      }));\n    };\n  };\n}\nvar I18nProvider = function I18nProvider(_ref) {\n  var i18n = _ref.i18n,\n      defaultComponent = _ref.defaultComponent,\n      _ref$forceRenderOnLoc = _ref.forceRenderOnLocaleChange,\n      forceRenderOnLocaleChange = _ref$forceRenderOnLoc === void 0 ? true : _ref$forceRenderOnLoc,\n      children = _ref.children;\n\n  /**\r\n   * We can't pass `i18n` object directly through context, because even when locale\r\n   * or messages are changed, i18n object is still the same. Context provider compares\r\n   * reference identity and suggested workaround is create a wrapper object every time\r\n   * we need to trigger re-render. See https://reactjs.org/docs/context.html#caveats.\r\n   *\r\n   * Due to this effect we also pass `defaultComponent` in the same context, instead\r\n   * of creating a separate Provider/Consumer pair.\r\n   *\r\n   * We can't use useMemo hook either, because we want to recalculate value manually.\r\n   */\n  var makeContext = function makeContext() {\n    return {\n      i18n: i18n,\n      defaultComponent: defaultComponent\n    };\n  };\n\n  var _React$useState = React__default['default'].useState(makeContext()),\n      _React$useState2 = _slicedToArray__default['default'](_React$useState, 2),\n      context = _React$useState2[0],\n      setContext = _React$useState2[1];\n  /**\r\n   * Subscribe for locale/message changes\r\n   *\r\n   * I18n object from `@lingui/core` is the single source of truth for all i18n related\r\n   * data (active locale, catalogs). When new messages are loaded or locale is changed\r\n   * we need to trigger re-rendering of LinguiContext.Consumers.\r\n   */\n\n\n  React__default['default'].useEffect(function () {\n    var unsubscribe = i18n.on(\"change\", function () {\n      return setContext(makeContext());\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n  var renderKey = forceRenderOnLocaleChange && i18n.locale;\n  if (forceRenderOnLocaleChange && !renderKey) return null;\n  return /*#__PURE__*/React__default['default'].createElement(LinguiContext.Provider, {\n    value: context,\n    key: renderKey\n  }, children);\n};\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar tagRe = /<(\\d+)>(.*?)<\\/\\1>|<(\\d+)\\/>/;\nvar nlRe = /(?:\\r\\n|\\r|\\n)/g; // For HTML, certain tags should omit their close tag. We keep a whitelist for\n// those special-case tags.\n\nvar voidElementTags = {\n  area: true,\n  base: true,\n  br: true,\n  col: true,\n  embed: true,\n  hr: true,\n  img: true,\n  input: true,\n  keygen: true,\n  link: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true,\n  menuitem: true\n};\n/**\r\n * `formatElements` - parse string and return tree of react elements\r\n *\r\n * `value` is string to be formatted with <0>Paired<0/> or <0/> (unpaired)\r\n * placeholders. `elements` is a array of react elements which indexes\r\n * correspond to element indexes in formatted string\r\n */\n\nfunction formatElements(value) {\n  var elements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var uniqueId = makeCounter(0, '$lingui$');\n  var parts = value.replace(nlRe, \"\").split(tagRe); // no inline elements, return\n\n  if (parts.length === 1) return value;\n  var tree = [];\n  var before = parts.shift();\n  if (before) tree.push(before);\n\n  var _iterator = _createForOfIteratorHelper(getElements(parts)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray__default['default'](_step.value, 3),\n          index = _step$value[0],\n          children = _step$value[1],\n          after = _step$value[2];\n\n      var element = elements[index];\n\n      if (!element || voidElementTags[element.type] && children) {\n        if (!element) {\n          console.error(\"Can use element at index '\".concat(index, \"' as it is not declared in the original translation\"));\n        } else {\n          console.error(\"\".concat(element.type, \" is a void element tag therefore it must have no children\"));\n        } // ignore problematic element but push its children and elements after it\n\n\n        element = /*#__PURE__*/React__default['default'].createElement(React__default['default'].Fragment);\n      }\n\n      tree.push( /*#__PURE__*/React__default['default'].cloneElement(element, {\n        key: uniqueId()\n      }, // format children for pair tags\n      // unpaired tags might have children if it's a component passed as a variable\n      children ? formatElements(children, elements) : element.props.children));\n      if (after) tree.push(after);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return tree;\n}\n/*\r\n * `getElements` - return array of element indexes and element childrens\r\n *\r\n * `parts` is array of [pairedIndex, children, unpairedIndex, textAfter, ...]\r\n * where:\r\n * - `pairedIndex` is index of paired element (undef for unpaired)\r\n * - `children` are children of paired element (undef for unpaired)\r\n * - `unpairedIndex` is index of unpaired element (undef for paired)\r\n * - `textAfter` is string after all elements (empty string, if there's nothing)\r\n *\r\n * `parts` length is always multiply of 4\r\n *\r\n * Returns: Array<[elementIndex, children, after]>\r\n */\n\n\nfunction getElements(parts) {\n  if (!parts.length) return [];\n\n  var _parts$slice = parts.slice(0, 4),\n      _parts$slice2 = _slicedToArray__default['default'](_parts$slice, 4),\n      paired = _parts$slice2[0],\n      children = _parts$slice2[1],\n      unpaired = _parts$slice2[2],\n      after = _parts$slice2[3];\n\n  return [[parseInt(paired || unpaired), children || \"\", after]].concat(getElements(parts.slice(4, parts.length)));\n}\n\nvar makeCounter = function makeCounter() {\n  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return function () {\n    return \"\".concat(prefix, \"_\").concat(count++);\n  };\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty__default['default'](target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\nfunction Trans(props) {\n  var _useLingui = useLingui(),\n      i18n = _useLingui.i18n,\n      defaultComponent = _useLingui.defaultComponent;\n\n  var render = props.render,\n      component = props.component,\n      id = props.id,\n      message = props.message,\n      formats = props.formats;\n\n  var values = _objectSpread({}, props.values);\n\n  var components = _objectSpread({}, props.components);\n\n  if (values) {\n    /*\r\n      Related discussion: https://github.com/lingui/js-lingui/issues/183\r\n           Values *might* contain React elements with static content.\r\n      They're replaced with <INDEX /> placeholders and added to `components`.\r\n           Example:\r\n      Translation: Hello {name}\r\n      Values: { name: <strong>Jane</strong> }\r\n           It'll become \"Hello <0 />\" with components=[<strong>Jane</strong>]\r\n      */\n    Object.keys(values).forEach(function (key) {\n      var value = values[key];\n      if (! /*#__PURE__*/React__default['default'].isValidElement(value)) return;\n      var index = Object.keys(components).length;\n      components[index] = value;\n      values[key] = \"<\".concat(index, \"/>\");\n    });\n  }\n\n  var _translation = i18n && typeof i18n._ === \"function\" ? i18n._(id, values, {\n    message: message,\n    formats: formats\n  }) : id; // i18n provider isn't loaded at all\n\n\n  var translation = _translation ? formatElements(_translation, components) : null;\n\n  if (render === null || component === null) {\n    // Although `string` is a valid react element, types only allow `Element`\n    // Upstream issue: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544\n    return translation;\n  }\n\n  var FallbackComponent = defaultComponent || React__default['default'].Fragment; // Validation of `render` and `component` props\n\n  if (render && component) {\n    console.error(\"You can't use both `component` and `render` prop at the same time. `component` is ignored.\");\n  } else if (render && typeof render !== \"function\") {\n    console.error(\"Invalid value supplied to prop `render`. It must be a function, provided \".concat(render));\n  } else if (component && typeof component !== \"function\") {\n    // Apparently, both function components and class components are functions\n    // See https://stackoverflow.com/a/41658173/1535540\n    console.error(\"Invalid value supplied to prop `component`. It must be a React component, provided \".concat(component));\n    return /*#__PURE__*/React__default['default'].createElement(FallbackComponent, null, translation);\n  } // Rendering using a render prop\n\n\n  if (typeof render === \"function\") {\n    // Component: render={(props) => <a title={props.translation}>x</a>}\n    return render({\n      id: id,\n      translation: translation,\n      message: message\n    });\n  } // `component` prop has a higher precedence over `defaultComponent`\n\n\n  var Component = component || FallbackComponent;\n  return /*#__PURE__*/React__default['default'].createElement(Component, null, translation);\n}\nTrans.defaultProps = {\n  values: {},\n  components: {}\n};\n\nexports.I18nProvider = I18nProvider;\nexports.Trans = Trans;\nexports.useLingui = useLingui;\nexports.withI18n = withI18n;\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}